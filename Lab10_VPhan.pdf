#Victor Phan
#Lab 10
#12/1/2022

from math import sqrt

#TASK 1
def checkPalindrome(word):
    #filter out every char in the word that is alphanumeric
    word = list(filter(str.isalnum, word))

    #make every element in list lowercase
    for i in range(len(word)):
        word[i] = word[i].lower()

    #base case
    if len(word) <= 1:
        return True

    #see if both ends are equal and continue recursive pattern
    return word[0] == word[-1] and checkPalindrome(word[1:-1])

#TASK 2
#uses selection sort
def sort(comparison, values):
    for i in range(len(values)):
        #get the smallest value (start at i)
        min = values[i]
        swapIndex = i

        #go through all elements after i
        for j in range(i+1, len(values)):
            #use comparison - returns the greater priority value
            if values[j] == comparison(values[j], values[swapIndex]):
                min = values[j]
                swapIndex = j

        #swap elements
        temp = values[i]
        values[i] = min
        values[swapIndex] = temp

#provided by directions document
def isPrime (n) :
    if n <= 1 :
        return 0
    for fac in range (2, int(sqrt(n))+1) :
        if n % fac == 0 :
            return 0
    return 1

def main():
    #my test cases
    print("racecar",checkPalindrome("racecar"))
    print("I hit my foot",checkPalindrome("I hit my foot"))
    print("Too bad--I hid a boot.",checkPalindrome("Too bad--I hid a boot."))

    print("never odd or even",checkPalindrome("never odd or even"))
    print("no lemon, no melon",checkPalindrome("no lemon, no melon"))

    list1 = [5,2,12,4,9,13,22,1,6,17]
    list2 =  ["Kate", "Sam", "Kate", "Jolly", "Alp", "Beta", "Alpine", "Samuel", "Bob", "Joy"]
    list3 = [("Kate", 3), ("Sam", 2), ("Kate", 5), ("Jolly", 1), ("Alp", 2), ("Beta", 3), ("Alp", 1), ("Alpine", 2), ("Sam", 4), ("Bob", 2), ("Sam", 3)]

    #TASK 2

    sort(lambda x, y: x if x < y else y, list1); print(list1) #numerically greater
    sort(lambda x, y: x if x < y else y, list2); print(list2) #alphabetic priority
    
    def tupleCompare(x, y):
        #first prioritize the name
        if x[0] < y[0]:
            return x
        elif x[0] > y[0]:
            return y
        #if the names are the same, prioritize the number
        else:
            if y[1] > x[1]:
                return y
            else:
                return x

    sort(tupleCompare, list3); print(list3)

    #TASK 3

    #generate 1 to 100
    L = [x for x in range(1,101)]
    
    print("List L:")
    print(L)
    
    #double every element in L
    print("Double every element:")
    print(list(map(lambda x: x*2, L)))
    
    #square every odd element in L
    print("Square every odd element:")
    print(list(map(lambda x: x*x,list(filter(lambda x : x%2 == 1, L)))))

    #filter out all primes in L
    print("Filter out all primes:")
    print(list(filter(isPrime, L)))

if __name__ == "__main__":
    main()

'''
racecar True
I hit my foot False
Too bad--I hid a boot. True
never odd or even True
no lemon, no melon True
[1, 2, 4, 5, 6, 9, 12, 13, 17, 22]
['Alp', 'Alpine', 'Beta', 'Bob', 'Jolly', 'Joy', 'Kate', 'Kate', 'Sam', 'Samuel']       
[('Alp', 2), ('Alp', 1), ('Alpine', 2), ('Beta', 3), ('Bob', 2), ('Jolly', 1), ('Kate', 5), ('Kate', 3), ('Sam', 4), ('Sam', 3), ('Sam', 2)]
List L:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
Double every element:
[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]
Square every odd element:
[1, 9, 25, 49, 81, 121, 169, 225, 289, 361, 441, 529, 625, 729, 841, 961, 1089, 1225, 1369, 1521, 1681, 1849, 2025, 2209, 2401, 2601, 2809, 3025, 3249, 3481, 3721, 3969, 4225, 4489, 4761, 5041, 5329, 5625, 5929, 6241, 6561, 6889, 7225, 7569, 7921, 8281, 8649, 9025, 9409, 9801]
Filter out all primes:
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
'''